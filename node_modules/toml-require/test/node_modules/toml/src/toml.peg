{
  var nodes = [];

  function addNode(node) {
    nodes.push(node);
  }

  function node(type, value, line, column, key) {
    var obj = { type: type, value: value, line: line(), column: column() };
    if (key) obj.key = key;
    return obj;
  }
}

start
  = line*                               { return nodes }

line
  = S* expr:expression S* comment* (NL+ / EOF)
  / S+ (NL+ / EOF)

expression
  = comment / path / tablearray / assignment

comment
  = '#' (!(NL / EOF) .)*

path
  = '[' name:key ']'                    { addNode(node('ObjectPath', name, line, column)) }

tablearray
  = '[' '[' name:key ']' ']'            { addNode(node('ArrayPath', name, line, column)) }

assignment
  = key:key S* '=' S* value:value       { addNode(node('Assign', value, line, column, key)) }

key
  = chars:(!(S / NL / '[' / ']' / '=') char:. { return char })+ { return chars.join('') }

value
  = string / datetime / float / integer / boolean / array

string
  = '"' chars:string_char* '"'          { return node('String', chars.join(''), line, column) }

string_char
  = ESCAPED / (!'"' !'\\' char:. { return char })

float
  =     digits:(DIGITS '.' DIGITS)      { return node('Float', parseFloat(digits.join('')), line, column) }
  / '-' digits:(DIGITS '.' DIGITS)      { return node('Float', -1 * parseFloat(digits.join('')), line, column) }

integer
  =     digits:DIGIT+ !'.'              { return node('Integer', parseInt(digits.join(''), 10), line, column) }
  / '-' digits:DIGIT+ !'.'              { return node('Integer', -1 * parseInt(digits.join(''), 10), line, column) }

boolean
  = 'true'                              { return node('Boolean', true, line, column) }
  / 'false'                             { return node('Boolean', false, line, column) }

array
  = '[' value:array_value? ']'                         { return node('Array', value ? [value] : [], line, column) }
  / '[' values:array_value_list+ ']'                   { return node('Array', values, line, column) }
  / '[' values:array_value_list+ value:array_value ']' { return node('Array', values.concat(value), line, column) }

array_value
  = array_sep* value:value array_sep*                  { return value }

array_value_list
  = array_sep* value:value array_sep* ',' array_sep*   { return value }

array_sep
  = S / NL / comment

datetime
  = date:(
      DIGIT DIGIT DIGIT DIGIT
      '-'
      DIGIT DIGIT
      '-'
      DIGIT DIGIT
      'T'
      DIGIT DIGIT
      ':'
      DIGIT DIGIT
      ':'
      DIGIT DIGIT
      'Z'
    )            { return node('Date', new Date(date.join('')), line, column) }

S                = [ \t]
NL               = "\n" / "\r" "\n"
EOF              = !.
HEX              = [0-9a-f]i
DIGIT            = [0-9]
DIGITS           = d:[0-9]+             { return d.join('') }
ESCAPED          = '\\"'                { return '"'  }
                 / '\\\\'               { return '\\' }
                 / '\\/'                { return '/'  }
                 / '\\b'                { return '\b' }
                 / '\\t'                { return '\t' }
                 / '\\n'                { return '\n' }
                 / '\\f'                { return '\f' }
                 / '\\r'                { return '\r' }
                 / ESCAPED_UNICODE
ESCAPED_UNICODE  = "\\u" digits:(HEX HEX HEX HEX) { return String.fromCharCode(parseInt("0x" + digits.join(''))) }
